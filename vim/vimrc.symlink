call plug#begin('~/.vim/plugged')

" let Vundle manage Vundle, required
Plug 'gmarik/Vundle.vim'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)
" colorschemes
Plug 'joshdick/onedark.vim'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'jlanzarotta/bufexplorer'

Plug 'tmhedberg/SimpylFold'
Plug 'kien/ctrlp.vim'
Plug 'scrooloose/nerdtree'

Plug 'scrooloose/syntastic'
Plug 'SirVer/ultisnips'

Plug 'Valloric/YouCompleteMe', { 'do': './install.py --tern-completer' }

Plug 'sjl/gundo.vim'

Plug 'mileszs/ack.vim'

Plug 'majutsushi/tagbar'

Plug 'kshenoy/vim-signature'

Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'

Plug 'airblade/vim-gitgutter'

Plug 'nicolalamacchia/powerline-consolas'

Plug 'kana/vim-submode'

" endings for html, xml, etc. - ehances surround
Plug 'tpope/vim-ragtag'

" .editorconfig support
Plug 'editorconfig/editorconfig-vim'

" insert or delete brackets, parens, quotes in pair
Plug 'jiangmiao/auto-pairs'

" extended % matching
Plug 'vim-scripts/matchit.zip'

" detect indent style (tabs vs. spaces)
Plug 'tpope/vim-sleuth'

" Snippets
Plug 'honza/vim-snippets'

" html / templates {{{
    " emmet support for vim - easily create markdup wth CSS-like syntax
    Plug 'mattn/emmet-vim', { 'for': ['html', 'javascript.jsx'] }
    let g:user_emmet_settings = {
    \  'javascript.jsx': {
    \	   'extends': 'jsx',
    \  },
    \}

    " html5 support
    Plug 'othree/html5.vim', { 'for': 'html' }

" }}}

" Styles {{{
    Plug 'wavded/vim-stylus', { 'for': ['stylus', 'markdown'] }
    Plug 'groenewege/vim-less', { 'for': 'less' }
    Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }
    Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
    Plug 'gko/vim-coloresque'
    Plug 'stephenway/postcss.vim', { 'for': 'css' }
" }}}

" JSON {{{
    Plug 'elzr/vim-json', { 'for': 'json' }
    let g:vim_json_syntax_conceal = 0
" }}}

" JavaScript / TypeScript {{{
    Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript.jsx', 'html'] }
    Plug 'moll/vim-node', { 'for': 'javascript' }
    Plug 'mxw/vim-jsx', { 'for': ['javascript.jsx', 'javascript'] }
    Plug 'ternjs/tern_for_vim', { 'for': ['javascript', 'javascript.jsx'], 'do': 'npm install' }

    Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
    Plug 'angelozerr/tslint-language-service', { 'for': 'typescript' }
    Plug 'Quramy/tsuquyomi', { 'for': 'typescript', 'do': 'npm install' }
" }}}

" C# {{{
    Plug 'OmniSharp/omnisharp-vim'
    Plug 'tpope/vim-dispatch'
" }}}

" F# {{{
	Plug 'fsharp/vim-fsharp', {
		\ 'for': 'fsharp',
		\ 'do':  'make fsautocomplete',
		\}
" }}}

" Games
Plug 'johngrib/vim-game-code-break'

" Add plugins to &runtimepath
call plug#end()


filetype plugin indent on    " required


" Section General {{{

set nocompatible            " not compatible with vi
set autoread                " detect when a file is changed

set history=1000            " change history to 1000
set textwidth=120

set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

let g:python_host_prog = '/usr/local/bin/python2'
let g:python3_host_prog = '/usr/local/bin/python3'

" }}}

" Section User Interface {{{
"
if &term =~ "xterm\\|rxvt"
  " use a white cursor in insert mode
  let &t_SI = "\<Esc>]12;white\x7"
  " use a white cursor otherwise
  let &t_EI = "\<Esc>]12;white\x7"
  silent !echo -ne "\033]12;white\007"
  " reset cursor when vim exits
  autocmd VimLeave * silent !echo -ne "\033]112\007"
  " use \003]12;gray\007 for gnome-terminal
endif

if has("autocmd")
  au VimEnter,InsertLeave * silent execute '!echo -ne "\e[1 q"' | redraw!
  au InsertEnter,InsertChange *
    \ if v:insertmode == 'i' | 
    \   silent execute '!echo -ne "\e[5 q"' | redraw! |
    \ elseif v:insertmode == 'r' |
    \   silent execute '!echo -ne "\e[5 q"' | redraw! |
    \ endif
  au VimLeave * silent execute '!echo -ne "\e[ q"' | redraw!
endif

if &term =~ '256color'
    " disable background color erase
    set t_ut=
endif

" enable 24 bit color support if supported
if (has("termguicolors"))
    set termguicolors
endif


syntax on                   " switch syntax highlighting on
set background=dark
colorscheme onedark         " Set the colorscheme
set t_Co=
syntax enable

" make the highlighting of tabs and other non-text less annoying
highlight NonText ctermbg=none ctermfg=238
highlight SpecialKey ctermbg=none ctermfg=238

" make comments italic
highlight Comment cterm=italic

set number                  " show line numbers
set relativenumber          " show relative line numbers

set wrap                    " turn on line wrapping
set wrapmargin=8            " wrap lines when coming within n characters from side
set linebreak               " set soft wrapping
set showbreak=…             " show ellipsis at breaking

set autoindent              " automatically set indent of new line
set smartindent

" toggle invisible characters
set list
set listchars=tab:→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮,space:·

" highlight conflicts
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" make backspace behave in a sane manner
set backspace=indent,eol,start

" persistent undo
set undofile
set undodir=~/.vim/undodir

" Tab control
set noexpandtab             " insert tabs rather than spaces for <Tab>
set smarttab                " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4               " the visible width of tabs
set softtabstop=4           " edit as if the tabs are 4 characters wide
set shiftwidth=4            " number of spaces to use for indent and unindent
set shiftround              " round indent to a multiple of 'shiftwidth'
set completeopt+=longest

" code folding settings
set foldmethod=indent		" fold based on indent
set foldnestmax=10          " deepest fold is 10 levels
set foldlevelstart=10		" open most folds by default
set nofoldenable            " don't fold by default
set foldlevel=1

" set clipboard=unnamed
set clipboard=unnamedplus,unnamed

set ttyfast                 " faster redrawing
set diffopt+=vertical
set laststatus=2            " show the satus line all the time
set so=7                    " set 7 lines to the cursors - when moving vertical
set wildmenu                " enhanced command line completion
set hidden                  " current buffer can be put into background
set showcmd                 " show incomplete commands
set noshowmode              " don't show which mode disabled for PowerLine
set wildmode=list:longest   " complete files like a shell
set scrolloff=3             " lines of text around cursor
set shell=$SHELL
set cmdheight=1             " command bar height
set title                   " set terminal title

" Searching
set ignorecase              " case insensitive searching
set smartcase               " case-sensitive if expresson contains a capital letter
set hlsearch                " highlight search results
set incsearch               " set incremental search, like modern browsers
set nolazyredraw            " don't redraw while executing macros

set magic                   " Set magic on, for regex

set showmatch               " show matching braces
set mat=2                   " how many tenths of a second to blink

" error bells
set noerrorbells
set visualbell
set t_vb=
set tm=500

if has('mouse')
	set mouse=a
endif

set pastetoggle=<F2> 		"F2 before pasting to preserve indentation

" move by words
set iskeyword=65-90,95,97-122,48-57 "the same: a-z,_,A-Z,0-9

" buffers
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" }}}


set splitbelow
set splitright


"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" inoremap <Char-0x07F> <BS>
" nnoremap <Char-0x07F> <BS>


" Section Mappings {{{

" set a map leader for more key combos
let mapleader = "\<Space>"

" remap esc
inoremap jk <esc>l

" shortcut to save
nmap <leader><leader> :w<cr>

" change the word with 0 reg
nmap <leader>; ciw<C-r>0jk

" add line and stay in normal mode
" nmap <S-CR> O<Esc>j
nmap <leader><CR> o<Esc>k

" edit ~/.vimrc
map <leader>ev :e! ~/.vimrc<cr>
map <leader>er :so ~/.vimrc<cr>

" edit gitconfig
map <leader>eg :e! ~/.gitconfig<cr>

" clear highlighted search
noremap <leader>h :set hlsearch! hlsearch?<cr>

" activate spell-checking alternatives
nmap ;s :set invspell spelllang=en<cr>

nmap <leader>l :set list!<cr>

" toggle cursor line
nnoremap <leader>i :set cursorline!<cr>

" search for word under the cursor
nnoremap <leader>/ "fyiw :/<c-r>f<cr>

" Navigate properly when lines are wrapped
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> ^ g^
nnoremap <silent> $ g$

map <leader>wc :wincmd q<cr>

" splitting current buffer
nmap <leader>- :split<CR>
nmap <leader>\ :vsplit<CR>

" resize panes
call submode#enter_with('grow/shrink', 'n', '', '<leader>rh', ':vertical resize -5<cr>')
call submode#enter_with('grow/shrink', 'n', '', '<leader>rl', ':vertical resize +5<cr>')
call submode#map('grow/shrink', 'n', '', 'l', ':vertical resize +5<cr>')
call submode#map('grow/shrink', 'n', '', 'h', ':vertical resize -5<cr>')
call submode#enter_with('grow/shrink', 'n', '', '<leader>rk', ':resize +5<cr>')
call submode#enter_with('grow/shrink', 'n', '', '<leader>rj', ':resize -5<cr>')
call submode#map('grow/shrink', 'n', '', 'j', ':resize -5<cr>')
call submode#map('grow/shrink', 'n', '', 'k', ':resize +5<cr>')
" }}}

" Section Plugins {{{

" airline options
"let g:Powerline_symbols = 'fancy'
"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup

" Just show the filename (no path) in the tab
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#fnamecollapse = 0
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#show_buffers=1
let g:airline#extensions#tabline#show_tabs = 0
"let g:airline#extensions#tabline#tab_nr_type = 1 " tab number

" CtrlP options
let g:ctrlp_max_files=0
let g:ctrlp_clear_cache_on_exit = 0

let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'

set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.pdb,*.dll,*.mdf,*.png,*.gif   " Windows

let g:ctrlp_user_command = ['.git/', 'git ls-files --cached --others  --exclude-standard %s']
"let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'  " Windows

" Ignore some folders and files for CtrlP indexing
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|pdb|mdf|pack|zip|png|gif)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" search the nearest ancestor that contains .git, .hg, .svn
"let g:ctrlp_working_path_mode = 2
 
nmap <silent> <leader>t :CtrlP<cr>
nmap <silent> <leader>b :CtrlPBuffer<cr>
"let g:ctrlp_map='<leader>t'
"let g:ctrlp_dotfiles=1
"let g:ctrlp_working_path_mode = 'ra'
  
" NERD Tree mappings

nmap <silent> <leader>n :NERDTreeToggle<CR>
map <silent> <leader>nf :NERDTreeFind<cr>

" OmniSharp options

" let g:OmniSharp_server_type = 'v1'
let g:OmniSharp_server_type = 'roslyn'

" OmniSharp won't work without this setting
filetype plugin on

"This is the default value, setting it isn't actually necessary
let g:OmniSharp_host = "http://localhost:2000"

"Set the type lookup function to use the preview window instead of the status line
"let g:OmniSharp_typeLookupInPreview = 1

"Timeout in seconds to wait for a response from the server
let g:OmniSharp_timeout = 1

"Showmatch significantly slows down omnicomplete
"when the first match contains parentheses.
set noshowmatch

"Super tab settings - uncomment the next 4 lines
"let g:SuperTabDefaultCompletionType = 'context'
"let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
"let g:SuperTabDefaultCompletionTypeDiscovery = ["&omnifunc:<c-x><c-o>","&completefunc:<c-x><c-n>"]
"let g:SuperTabClosePreviewOnPopupClose = 1

"don't autoselect first item in omnicomplete, show if only one item (for preview)
"remove preview if you don't want to see any documentation whatsoever.
set completeopt=longest,menuone,preview
" Fetch full documentation during omnicomplete requests.
" There is a performance penalty with this (especially on Mono)
" By default, only Type/Method signatures are fetched. Full documentation can still be fetched when
" you need it with the :OmniSharpDocumentation command.
" let g:omnicomplete_fetch_documentation=1

"Move the preview window (code documentation) to the bottom of the screen, so it doesn't move the code!
"You might also want to look at the echodoc plugin

" Get Code Issues and syntax errors
"let g:syntastic_cs_checkers = ['syntax', 'semantic', 'issues']
" If you are using the omnisharp-roslyn backend, use the following
let g:syntastic_cs_checkers = ['code_checker']
augroup omnisharp_commands
    autocmd!
    "Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
    autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
    "show type information automatically when the cursor stops moving
    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()
    "The following commands are contextual, based on the current cursor position.
    autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition<cr>
    autocmd FileType cs nnoremap <leader>fi :OmniSharpFindImplementations<cr>
    autocmd FileType cs nnoremap <leader>ft :OmniSharpFindType<cr>
    autocmd FileType cs nnoremap <leader>fs :OmniSharpFindSymbol<cr>
    autocmd FileType cs nnoremap <leader>fu :OmniSharpFindUsages<cr>
    "finds members in the current buffer
    autocmd FileType cs nnoremap <leader>fm :OmniSharpFindMembers<cr>
    " cursor can be anywhere on the line containing an issue
    autocmd FileType cs nnoremap <leader>x  :OmniSharpFixIssue<cr>
    autocmd FileType cs nnoremap <leader>fx :OmniSharpFixUsings<cr>
    autocmd FileType cs nnoremap <leader>tt :OmniSharpTypeLookup<cr>
    autocmd FileType cs nnoremap <leader>dc :OmniSharpDocumentation<cr>

augroup END

" this setting controls how long to wait (in ms) before fetching type / symbol information.
set updatetime=500
" Remove 'Press Enter to continue' message when type information is longer than one line.
set cmdheight=2

" rename with dialog
nnoremap <leader>nm :OmniSharpRename<cr>
nnoremap <F2> :OmniSharpRename<cr>
" rename without dialog - with cursor on the symbol to rename... ':Rename newname'
command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

nnoremap <leader>cf :OmniSharpCodeFormat<cr>
" Load the current .cs file to the nearest project
nnoremap <leader>tp :OmniSharpAddToProject<cr>

" (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution
nnoremap <leader>ss :OmniSharpStartServer<cr>
nnoremap <leader>sp :OmniSharpStopServer<cr>

" Add syntax highlighting for types and interfaces
nnoremap <leader>th :OmniSharpHighlightTypes<cr>
"Don't ask to save when changing buffers (i.e. when jumping to a type definition)
set hidden

" Enable snippet completion, requires completeopt-=preview
let g:OmniSharp_want_snippet=1

" F#, fsharp
augroup fsharp
    au!
    autocmd FileType fsharp set et ts=4 sw=4
    autocmd FileType fsharp nnoremap <buffer> <leader>r :FsiShow<Enter>
    autocmd FileType fsharp nnoremap <buffer> <leader>c :FsiClear<Enter>
augroup END

let g:fsharp_completion_helptext = 1

" syntastic settings
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height=5

"let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['*.cs'],'passive_filetypes': [] }
"nnoremap <C-w>e :SyntasticCheck<CR> :SyntasticToggleMode<CR>
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
noremap <C-w>e :SyntasticCheck<CR>
noremap <C-w>f :SyntasticToggleMode<CR>

"navigate down to the next error
autocmd FileType cs nnoremap <leader>e :SyntasticNext<cr>
"autocmd FileType cs nnoremap <leader> :SyntasticPrev<cr>


"Ctags settings
"nnoremap <leader>. :CtrlPTag<cr>

" bufftab
hi link BufTabLineFill Normal

" vim-commentary settings
autocmd FileType c,cpp,cs,java,js,ts setlocal commentstring=//\ %s

" Easymotion settings
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
" nmap s <Plug>(easymotion-overwin-f2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>w <Plug>(easymotion-w)
" map <Leader>b <Plug>(easymotion-b)
map <Leader>f <Plug>(easymotion-f)

" gundo settings
" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

" ACK settings
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>

" Ctags
"!ctags {.,**}/*.{cs,ts,tsx}
"ctags −−languages=c#,typescript,tsx .

" Tagbar
nnoremap <silent> <Leader>. :TagbarToggle<CR>

" tsuquyomi
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi'] " You shouldn't use 'tsc' checker.
autocmd FileType typescript nmap <buffer> <Leader>e <Plug>(TsuquyomiRenameSymbol)
autocmd FileType typescript nmap <buffer> <Leader>E <Plug>(TsuquyomiRenameSymbolC)

" ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<s-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsUsePythonVersion = 2

" Fugitive Shortcuts
"""""""""""""""""""""""""""""""""""""
nmap <silent><leader>gs :Gstatus<cr>
nmap <leader>ge :Gedit<cr>
nmap <silent><leader>gr :Gread<cr>
nmap <silent><leader>gb :Gblame<cr>

"submode
""disable submode timeouts:
let g:submode_timeout = 0
" don't consume submode-leaving key
let g:submode_keep_leaving_key = 1

" }}}

" gitgutter
" let g:gitgutter_diff_base = "origin/master"

"YCM
" Start autocompletion after 2 chars
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_enable_diagnostic_signs = 0

" Don't show YCM's preview window
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0

" Custom Scripts
function! Get_git_root()
    if exists('*fugitive#repo')
	try
	    return fugitive#repo().tree()
	catch
	endtry
    endif
    let root = split(system('git rev-parse --show-toplevel'), '\n')[0]
    return v:shell_error ? '' : root
endfunction
function! DiffFile()
    let winheight = winheight(winnr())
    let branchname=b:branchName
    let filename = substitute(getline('.'), '^\w*\s*\(.*\)', '\1', '')
    let gitroot = b:gitroot
    only
    wincmd s
    wincmd k
    execute 'resize '.winheight
    wincmd k
    wincmd J
    wincmd k
    execute 'cd '.gitroot
    execute 'edit '.filename
    execute 'Gdiff '.branchname
endfunction
function! GDiffBranch(branchName)
    let gitroot = Get_git_root()
    let tmpfile = tempname()
    execute 'pedit '.tmpfile
    wincmd P
    let b:branchName=a:branchName
    let b:gitroot = gitroot
    nmap <buffer> q :q!<cr>
    execute 'silent read! git diff --name-status '.a:branchName
    normal! ggdd
    resize 12
    setlocal nomodifiable
    nmap <buffer> gd :call DiffFile()<cr>
endfunction
command! -nargs=1 GDiffBranch call GDiffBranch(<q-args>)

" vim:foldmethod=marker:foldlevel=0
