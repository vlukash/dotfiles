" .vimrc / init.vim
" The following vim/neovim configuration works for both Vim and NeoVim

" ensure vim-plug is installed and then load it
call functions#PlugLoad()
call plug#begin('~/.vim/plugged')
" call plug#begin('~/.config/nvim/plugged')

" General {{{
	" Abbreviations
	abbr teh the

	set autoread " detect when a file is changed

	set history=1000 " change history to 1000
	set textwidth=120

	set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
	set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

	if (has('nvim'))
		let g:python_host_prog = '/usr/local/bin/python2'
		let g:python3_host_prog = '/usr/local/bin/python3'
		" show results of substition as they're happening
		" but don't open a split
		set inccommand=nosplit
	endif

	set backspace=indent,eol,start " make backspace behave in a sane manner
	set clipboard=unnamedplus,unnamed

	if has('mouse')
		set mouse=a
	endif

	" Searching
	set ignorecase " case insensitive searching
	set smartcase " case-sensitive if expresson contains a capital letter
	set hlsearch " highlight search results
	set incsearch " set incremental search, like modern browsers
	set nolazyredraw " don't redraw while executing macros

	set magic " Set magic on, for regex

	" error bells
	set noerrorbells
	set visualbell
	set t_vb=
	set tm=500
" }}}

" Appearance {{{
	set number " show line numbers
	set relativenumber " show relative line numbers
	set wrap " turn on line wrapping
	set wrapmargin=8 " wrap lines when coming within n characters from side
	set linebreak " set soft wrapping
	set showbreak=… " show ellipsis at breaking
	set autoindent " automatically set indent of new line
	set ttyfast " faster redrawing
	set diffopt+=vertical
	set laststatus=2 " show the satus line all the time
	set so=7 " set 7 lines to the cursors - when moving vertical
	set wildmenu " enhanced command line completion
	set hidden " current buffer can be put into background
	set showcmd " show incomplete commands
	set noshowmode " don't show which mode disabled for PowerLine
	set wildmode=list:longest " complete files like a shell
	set scrolloff=3 " lines of text around cursor
	set shell=$SHELL
	set cmdheight=1 " command bar height
	set title " set terminal title
	set showmatch " show matching braces
	set mat=2 " how many tenths of a second to blink

	" Tab control
	set noexpandtab " insert tabs rather than spaces for <Tab>
	set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
	set tabstop=4 " the visible width of tabs
	set softtabstop=4 " edit as if the tabs are 4 characters wide
	set shiftwidth=4 " number of spaces to use for indent and unindent
	set shiftround " round indent to a multiple of 'shiftwidth'

	" persistent undo
	set undofile
	set undodir=~/.vim/undodir

	" code folding settings
	set foldmethod=syntax " fold based on indent
	set foldlevelstart=99
	set foldnestmax=10 " deepest fold is 10 levels
	set nofoldenable " don't fold by default
	set foldlevel=1

	" toggle invisible characters
	set list
	set listchars=tab:→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
	set showbreak=↪

	if &term =~ "xterm\\|rxvt"
	  " use a white cursor in insert mode
	  let &t_SI = "\<Esc>]12;white\x7"
	  " use a white cursor otherwise
	  let &t_EI = "\<Esc>]12;white\x7"
	  silent !echo -ne "\033]12;white\007"
	  " reset cursor when vim exits
	  autocmd VimLeave * silent !echo -ne "\033]112\007"
	  " use \003]12;gray\007 for gnome-terminal
	endif

	if has("autocmd")
	  au VimEnter,InsertLeave * silent execute '!echo -ne "\e[1 q"' | redraw!
	  au InsertEnter,InsertChange *
	    \ if v:insertmode == 'i' | 
	    \   silent execute '!echo -ne "\e[5 q"' | redraw! |
	    \ elseif v:insertmode == 'r' |
	    \   silent execute '!echo -ne "\e[5 q"' | redraw! |
	    \ endif
	  au VimLeave * silent execute '!echo -ne "\e[ q"' | redraw!
	endif

	if &term =~ '256color'
	    " disable background color erase
	    set t_ut=
	endif

	" enable 24 bit color support if supported
	if (has("termguicolors"))
	    set termguicolors
	endif

	" highlight conflicts
	match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

	" Load colorschemes
	Plug 'chriskempson/base16-vim'
	Plug 'joshdick/onedark.vim'

	" Airline {{{
		Plug 'vim-airline/vim-airline'
		Plug 'vim-airline/vim-airline-themes'
		let g:airline_powerline_fonts=1
		let g:airline_left_sep=''
		let g:airline_right_sep=''
		" let g:airline_theme='base16'
		let g:airline#extensions#tabline#show_splits = 0
		let g:airline#extensions#whitespace#enabled = 0
		" enable airline tabline
		let g:airline#extensions#tabline#enabled = 1
		" only show tabline if tabs are being used (more than 1 tab open)
		let g:airline#extensions#tabline#tab_min_count = 2
		" do not show open buffers in tabline
		let g:airline#extensions#tabline#show_buffers = 1
		" Show errors in airline from ALE
		let g:airline#extensions#ale#enabled = 1
	" }}}

" General Mappings {{{
	" set a map leader for more key combos
	let mapleader = "\<Space>"

	" remap esc
	inoremap jk <esc>

	" shortcut to save
	nmap <leader><Space> :w<cr>

	" set paste toggle
	set pastetoggle=<leader>v

	" edit ~/.config/nvim/init.vim
	map <leader>ev :e! ~/.vimrc<cr>
	" edit gitconfig
	map <leader>eg :e! ~/.gitconfig<cr>

	" clear highlighted search
	noremap <leader>h :set hlsearch! hlsearch?<cr>

	" activate spell-checking alternatives
	nmap ;s :set invspell spelllang=en<cr>

	" change the word with 0 reg
	nmap <leader>; ciw<C-r>0jk
	
	" add line and stay in normal mode
	nmap <leader><CR> o<Esc>k
	
	" search for word under the cursor
	nnoremap <leader>/ "fyiw :/<c-r>f<cr>

	" markdown to html
	nmap <leader>md :%!markdown --html4tags <cr>

	" " remove extra whitespace
	" nmap <leader><space> :%s/\s\+$<cr>
	" nmap <leader><space><space> :%s/\n\{2,}/\r\r/g<cr>

	inoremap <expr> <C-j> pumvisible() ? "\<C-N>" : "\<C-j>"
	inoremap <expr> <C-k> pumvisible() ? "\<C-P>" : "\<C-k>"

	nmap <leader>l :set list!<cr>

	" Textmate style indentation
	vmap <leader>[ <gv
	vmap <leader>] >gv
	nmap <leader>[ <<
	nmap <leader>] >>

	" switch between current and last buffer
	nmap <leader>. <c-^>

	" enable . command in visual mode
	vnoremap . :normal .<cr>

	map <silent> <C-h> :call functions#WinMove('h')<cr>
	map <silent> <C-j> :call functions#WinMove('j')<cr>
	map <silent> <C-k> :call functions#WinMove('k')<cr>
	map <silent> <C-l> :call functions#WinMove('l')<cr>

	" move line mappings
	" ∆ is <A-j> on macOS
	" ˚ is <A-k> on macOS
	nnoremap ∆ :m .+1<cr>==
	nnoremap ˚ :m .-2<cr>==
	inoremap ∆ <Esc>:m .+1<cr>==gi
	inoremap ˚ <Esc>:m .-2<cr>==gi
	vnoremap ∆ :m '>+1<cr>gv=gv
	vnoremap ˚ :m '<-2<cr>gv=gv

	" toggle cursor line
	nnoremap <leader>i :set cursorline!<cr>

	" scroll the viewport faster
	nnoremap <C-e> 3<C-e>
	nnoremap <C-y> 3<C-y>

	" moving up and down work as you would expect
	nnoremap <silent> j gj
	nnoremap <silent> k gk
	nnoremap <silent> ^ g^
	nnoremap <silent> $ g$

	" inoremap <tab> <c-r>=Smart_TabComplete()<CR>

	map <leader>r :call RunCustomCommand()<cr>
	" map <leader>s :call SetCustomCommand()<cr>
	let g:silent_custom_command = 0

	" helpers for dealing with other people's code
	nmap \t :set ts=4 sts=4 sw=4 noet<cr>
	nmap \s :set ts=4 sts=4 sw=4 et<cr>
" }}}

" AutoGroups {{{
	" file type specific settings
	augroup configgroup
		autocmd!

		" automatically resize panes on resize
		autocmd VimResized * exe 'normal! \<c-w>='
		autocmd BufWritePost .vimrc,.vimrc.local,init.vim source %
		autocmd BufWritePost .vimrc.local source %
		" save all files on focus lost, ignoring warnings about untitled buffers
		autocmd FocusLost * silent! wa

		" make quickfix windows take all the lower section of the screen
		" when there are multiple windows open
		autocmd FileType qf wincmd J
		autocmd FileType qf nmap <buffer> q :q<cr>
		autocmd FileType javascript nmap <buffer> gd : TernDef<cr>
		autocmd CompleteDone * pclose
	augroup END
" }}}

" General Functionality {{{
	" substitute, search, and abbreviate multiple variants of a word
	Plug 'tpope/vim-abolish'

	" search inside files using ack. Same as command line ack utility, but use :Ack {{{
		Plug 'mileszs/ack.vim'
		cnoreabbrev Ack Ack!
		nnoremap <Leader>a :Ack!<Space>
	" }}}

	" insert or delete brackets, parens, quotes in pair
	Plug 'jiangmiao/auto-pairs'
	let g:AutoPairsShortcutToggle = '<C-p>'
	let g:AutoPairsShortcutJump = '<C-e>'
	let g:AutoPairsShortcutBackInsert = '<C-b>'

	" easy commenting motions
	Plug 'tpope/vim-commentary'

	" mappings which are simply short normal mode aliases for commonly used ex commands
	Plug 'tpope/vim-unimpaired'

	" endings for html, xml, etc. - ehances surround
	Plug 'tpope/vim-ragtag'

	" mappings to easily delete, change and add such surroundings in pairs, such as quotes, parens, etc.
	Plug 'tpope/vim-surround'

	" tmux integration for vim
	Plug 'benmills/vimux'

	" enables repeating other supported plugins with the . command
	Plug 'tpope/vim-repeat'

	" .editorconfig support
	Plug 'editorconfig/editorconfig-vim'

	" asynchronous build and test dispatcher
	Plug 'tpope/vim-dispatch'

	" netrw helper
	Plug 'tpope/vim-vinegar'

	" single/multi line code handler: gS - split one line into multiple, gJ - combine multiple lines into one
	Plug 'AndrewRadev/splitjoin.vim'

	" extended % matching
	Plug 'vim-scripts/matchit.zip'

	" detect indent style (tabs vs. spaces)
	Plug 'tpope/vim-sleuth'

	" Use Submode plugin to resize buffers {{{
		Plug 'kana/vim-submode'
		call submode#enter_with('grow/shrink', 'n', '', '<leader>`h', ':vertical resize -5<cr>')
		call submode#enter_with('grow/shrink', 'n', '', '<leader>`l', ':vertical resize +5<cr>')
		call submode#map('grow/shrink', 'n', '', 'l', ':vertical resize +5<cr>')
		call submode#map('grow/shrink', 'n', '', 'h', ':vertical resize -5<cr>')
		call submode#enter_with('grow/shrink', 'n', '', '<leader>`k', ':resize +5<cr>')
		call submode#enter_with('grow/shrink', 'n', '', '<leader>`j', ':resize -5<cr>')
		call submode#map('grow/shrink', 'n', '', 'j', ':resize -5<cr>')
		call submode#map('grow/shrink', 'n', '', 'k', ':resize +5<cr>')
	" }}}

	" Show marks {{{
		Plug 'kshenoy/vim-signature'
		" Support for gitgutter. When this =1 :
		" The mark is displayed over the gitgutter sign, but inherits the same colour so
		" you can tell what was there
		let g:SignatureMarkTextHLDynamic = 1
	" }}}

	" Writing in vim {{{
		Plug 'junegunn/limelight.vim'
		Plug 'junegunn/goyo.vim'
		let g:limelight_conceal_ctermfg = 240
	" }}}

	" context-aware pasting
	Plug 'sickill/vim-pasta'

	" Better Undo {{{
		Plug 'sjl/gundo.vim'
		nnoremap <leader>u :GundoToggle<CR>
	" }}}

	" " Manage your buffers
	" Plug 'jlanzarotta/bufexplorer'

	" YouCompleteMe	{{{
		Plug 'Valloric/YouCompleteMe', { 'do': 'python3 ./install.py --clang-completer --tern-completer' }
		" Start autocompletion after 2 chars
		let g:ycm_min_num_of_chars_for_completion = 1
		let g:ycm_min_num_identifier_candidate_chars = 1
		let g:ycm_enable_diagnostic_highlighting = 0
		let g:ycm_enable_diagnostic_signs = 0

		set completeopt-=preview
		let g:ycm_add_preview_to_completeopt = 0

		let g:ycm_error_symbol = '✖'	
		let g:ycm_warning_symbol = '⚠'	
		let g:ycm_key_list_select_completion = ['<C-j>', '<Down>']	
		let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']	
		let g:ycm_show_diagnostics_ui = 0	

		" let g:ycm_auto_start_csharp_server = 0
	" }}}

	" Easy Motion setup {{{
		Plug 'easymotion/vim-easymotion'
		let g:EasyMotion_do_mapping = 0 " Disable default mappings
		map <Leader>j <Plug>(easymotion-j)
		map <Leader>k <Plug>(easymotion-k)
		map <Leader>w <Plug>(easymotion-w)
		map <Leader>b <Plug>(easymotion-b)
		map <Leader>f <Plug>(easymotion-f)
	" }}}

	" NERDTree {{{
		Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
		Plug 'Xuyuanp/nerdtree-git-plugin'
		Plug 'ryanoasis/vim-devicons'

		" Toggle NERDTree
		function! ToggleNerdTree()
			if @% != "" && (!exists("g:NERDTree") || (g:NERDTree.ExistsForTab() && !g:NERDTree.IsOpen()))
				:NERDTreeFind
			else
				:NERDTreeToggle
			endif
		endfunction
		" toggle nerd tree
		nmap <silent> <leader>n :call ToggleNerdTree()<cr>
		" find the current file in nerdtree without needing to reload the drawer
		nmap <silent> <leader>nf :NERDTreeFind<cr>

		let NERDTreeShowHidden=1
		" let NERDTreeDirArrowExpandable = '▷'
		" let NERDTreeDirArrowCollapsible = '▼'
		let g:NERDTreeIndicatorMapCustom = {
		\ "Modified"  : "✹",
		\ "Staged"	  : "✚",
		\ "Untracked" : "✭",
		\ "Renamed"   : "➜",
		\ "Unmerged"  : "═",
		\ "Deleted"   : "✖",
		\ "Dirty"	  : "✗",
		\ "Clean"	  : "✔︎",
		\ 'Ignored'   : '☒',
		\ "Unknown"   : "?"
		\ }
	" }}}

	" FZF {{{
		Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
		Plug 'junegunn/fzf.vim'"
		let g:fzf_layout = { 'down': '~25%' }

		if isdirectory(".git")
			" if in a git project, use :GFiles
			nmap <silent> <leader>t :GFiles --cached --others --exclude-standard<cr>
		else
			" otherwise, use :FZF
			nmap <silent> <leader>t :FZF<cr>
		endif

		nmap <silent> <leader>y :Buffers<cr>
		nmap <silent> <leader>e :FZF<cr>
		nmap <leader><tab> <plug>(fzf-maps-n)
		xmap <leader><tab> <plug>(fzf-maps-x)
		omap <leader><tab> <plug>(fzf-maps-o)

		" Insert mode completion
		imap <c-x><c-k> <plug>(fzf-complete-word)
		imap <c-x><c-f> <plug>(fzf-complete-path)
		imap <c-x><c-j> <plug>(fzf-complete-file-ag)
		imap <c-x><c-l> <plug>(fzf-complete-line)

		nnoremap <silent> <Leader>C :call fzf#run({
		\	'source':
		\	  map(split(globpath(&rtp, "colors/*.vim"), "\n"),
		\		  "substitute(fnamemodify(v:val, ':t'), '\\..\\{-}$', '', '')"),
		\	'sink':    'colo',
		\	'options': '+m',
		\	'left':    30
		\ })<CR>

		command! FZFMru call fzf#run({
		\  'source':  v:oldfiles,
		\  'sink':	  'e',
		\  'options': '-m -x +s',
		\  'down':	  '40%'})

		nmap <silent> <leader>r :FZFMru<cr>

		command! -bang -nargs=* Find call fzf#vim#grep(
			\ 'rg --column --line-number --no-heading --follow --color=always '.<q-args>, 1,
			\ <bang>0 ? fzf#vim#with_preview('up:60%') : fzf#vim#with_preview('right:50%:hidden', '?'), <bang>0)
		command! -bang -nargs=? -complete=dir Files
			\ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
		command! -bang -nargs=? -complete=dir GFiles
			\ call fzf#vim#gitfiles(<q-args>, fzf#vim#with_preview(), <bang>0)
	" }}}

	" signify {{{
		" Plug 'airblade/vim-gitgutter'
		Plug 'mhinz/vim-signify'
		let g:signify_vcs_list = [ 'git' ]
		let g:signify_sign_add				 = '+'
		let g:signify_sign_delete			 = '_'
		let g:signify_sign_delete_first_line = '‾'
		let g:signify_sign_change = '!'
	" }}}

	" vim-fugitive {{{
		Plug 'tpope/vim-fugitive'
		Plug 'tpope/vim-rhubarb' " hub extension for fugitive
		nmap <silent> <leader>gs :Gstatus<cr>
		nmap <silent> <leader>gd :Gdiff<cr>
		nmap <leader>ge :Gedit<cr>
		nmap <silent><leader>gr :Gread<cr>
		nmap <silent><leader>gb :Gblame<cr>
		nmap <silent><leader>gu :diffupdate<cr>
	" }}}

	" ALE {{{
		Plug 'w0rp/ale' " Asynchonous linting engine
		let g:ale_completion_enabled = 1
		let g:ale_change_sign_column_color = 0
		let g:ale_sign_column_always = 1
		let g:ale_sign_error = '✖'
		let g:ale_sign_warning = '⚠'
		" let g:ale_set_loclist = 1
		" let g:ale_open_list = 1

		let g:ale_linters = {
		\	'javascript': ['eslint'],
		\	'typescript': ['tsserver', 'tslint'],
		\	'html': []
		\}
	" }}}

	" Syntastic {{{
		"Plug 'scrooloose/syntastic'
		""set statusline+=%#warningmsg#
		""set statusline+=%{SyntasticStatuslineFlag()}
		""set statusline+=%*

		"let g:syntastic_always_populate_loc_list = 1
		"let g:syntastic_auto_loc_list = 1
		"let g:syntastic_check_on_open = 1
		"let g:syntastic_check_on_wq = 0
		"let g:syntastic_loc_list_height=5

		""let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['*.cs'],'passive_filetypes': [] }
		""nnoremap <C-w>e :SyntasticCheck<CR> :SyntasticToggleMode<CR>
		"let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
		"noremap <C-w>e :SyntasticCheck<CR>
		"noremap <C-w>f :SyntasticToggleMode<CR>

		""navigate down to the next error
		"autocmd FileType cs nnoremap <leader>e :SyntasticNext<cr>
		""autocmd FileType cs nnoremap <leader> :SyntasticPrev<cr>
	" }}}

	" UltiSnips {{{
		Plug 'SirVer/ultisnips' " Snippets plugin
		
		" Snippets
		Plug 'honza/vim-snippets'

		let g:UltiSnipsExpandTrigger="<tab>"
		" let g:UltiSnipsExpandTrigger="<c-j>"
		let g:UltiSnipsJumpForwardTrigger="<c-j>"
		let g:UltiSnipsJumpBackwardTrigger="<c-k>"
	" }}}
" }}}

" Language-Specific Configuration {{{
	" html / templates {{{
		" emmet support for vim - easily create markdup wth CSS-like syntax
		Plug 'mattn/emmet-vim', { 'for': ['html', 'javascript.jsx', 'eruby' ]}
		let g:user_emmet_settings = {
		\  'javascript.jsx': {
		\	   'extends': 'jsx',
		\  },
		\}

		" match tags in html, similar to paren support
		Plug 'gregsexton/MatchTag', { 'for': 'html' }

		" html5 support
		Plug 'othree/html5.vim', { 'for': 'html' }

		" mustache support
		Plug 'mustache/vim-mustache-handlebars'

		" pug / jade support
		Plug 'digitaltoad/vim-pug', { 'for': ['jade', 'pug'] }

		" Ruby / Ruby on Rails
		Plug 'tpope/vim-rails', { 'for': 'ruby' }
	" }}}

	" JavaScript {{{
		Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript.jsx', 'html'] }
		Plug 'moll/vim-node', { 'for': 'javascript' }
		Plug 'mxw/vim-jsx', { 'for': ['javascript.jsx', 'javascript'] }
		Plug 'ternjs/tern_for_vim', { 'for': ['javascript', 'javascript.jsx'], 'do': 'npm install' }
	" }}}

	" TypeScript {{{
		Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
		Plug 'Shougo/vimproc.vim', { 'do': 'make' }
		Plug 'Quramy/tsuquyomi', { 'for': 'typescript', 'do': 'npm install' }

		" TypeScript Options
		let g:tsuquyomi_completion_detail = 1
		let g:tsuquyomi_disable_default_mappings = 1
		let g:tsuquyomi_completion_detail = 1
	" }}}

	" Styles {{{
		Plug 'wavded/vim-stylus', { 'for': ['stylus', 'markdown'] }
		Plug 'groenewege/vim-less', { 'for': 'less' }
		Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }
		Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
		Plug 'gko/vim-coloresque'
		Plug 'stephenway/postcss.vim', { 'for': 'css' }
	" }}}

	" markdown {{{
		Plug 'tpope/vim-markdown', { 'for': 'markdown' }

		" a simple tool for presenting slides in vim based on text files
		Plug 'sotte/presenting.vim', { 'for': 'markdown' }
	" }}}

	" JSON {{{
		Plug 'elzr/vim-json', { 'for': 'json' }
		let g:vim_json_syntax_conceal = 0
	" }}}
	
	" C# {{{
		Plug 'OmniSharp/omnisharp-vim'
		" let g:OmniSharp_server_type = 'v1'
		let g:OmniSharp_server_type = 'roslyn'

		let g:OmniSharp_server_path = '/Users/lukasvo/.dotfiles/config/nvim/plugged/omnisharp-vim/omnisharp-roslyn/artifacts/scripts/OmniSharp.Http'

		" OmniSharp won't work without this setting
		filetype plugin on

		"This is the default value, setting it isn't actually necessary
		let g:OmniSharp_host = "http://localhost:2000"

		"Timeout in seconds to wait for a response from the server
		let g:OmniSharp_timeout = 1

		"Showmatch significantly slows down omnicomplete
		"when the first match contains parentheses.
		set noshowmatch

		"don't autoselect first item in omnicomplete, show if only one item (for preview)
		"remove preview if you don't want to see any documentation whatsoever.
		set completeopt=longest,menuone,preview
		" Get Code Issues and syntax errors
		"let g:syntastic_cs_checkers = ['syntax', 'semantic', 'issues']
		" If you are using the omnisharp-roslyn backend, use the following
		let g:syntastic_cs_checkers = ['code_checker']
		augroup omnisharp_commands
			autocmd!
			"Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)
			autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
			"show type information automatically when the cursor stops moving
			autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()
			"The following commands are contextual, based on the current cursor position.
			autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition<cr>
			autocmd FileType cs nnoremap <leader>fi :OmniSharpFindImplementations<cr>
			autocmd FileType cs nnoremap <leader>ft :OmniSharpFindType<cr>
			autocmd FileType cs nnoremap <leader>fs :OmniSharpFindSymbol<cr>
			autocmd FileType cs nnoremap <leader>fu :OmniSharpFindUsages<cr>
			"finds members in the current buffer
			autocmd FileType cs nnoremap <leader>fm :OmniSharpFindMembers<cr>
			" cursor can be anywhere on the line containing an issue
			autocmd FileType cs nnoremap <leader>x  :OmniSharpFixIssue<cr>
			autocmd FileType cs nnoremap <leader>fx :OmniSharpFixUsings<cr>
			autocmd FileType cs nnoremap <leader>tt :OmniSharpTypeLookup<cr>
			autocmd FileType cs nnoremap <leader>dc :OmniSharpDocumentation<cr>

			" Folding 
			au FileType cs set omnifunc=syntaxcomplete#Complete 
			au FileType cs set foldmethod=marker 
			au FileType cs set foldmarker={,} 
			au FileType cs set foldtext=substitute(getline(v:foldstart),'{.*','{...}',) 
			au FileType cs set foldlevelstart=2 

		augroup END

		" this setting controls how long to wait (in ms) before fetching type / symbol information.
		set updatetime=500
		" Remove 'Press Enter to continue' message when type information is longer than one line.
		set cmdheight=2

		" rename with dialog
		nnoremap <leader>nm :OmniSharpRename<cr>
		nnoremap <F2> :OmniSharpRename<cr>
		" rename without dialog - with cursor on the symbol to rename... ':Rename newname'
		command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

		nnoremap <leader>cf :OmniSharpCodeFormat<cr>
		" Load the current .cs file to the nearest project
		nnoremap <leader>tp :OmniSharpAddToProject<cr>

		" (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution
		nnoremap <leader>ss :OmniSharpStartServer<cr>
		nnoremap <leader>sp :OmniSharpStopServer<cr>

		" Add syntax highlighting for types and interfaces
		nnoremap <leader>th :OmniSharpHighlightTypes<cr>
		"Don't ask to save when changing buffers (i.e. when jumping to a type definition)
		set hidden

		" Enable snippet completion, requires completeopt-=preview
		let g:OmniSharp_want_snippet=1
	" }}}

	Plug 'fatih/vim-go', { 'for': 'go' }
	Plug 'timcharper/textile.vim', { 'for': 'textile' }
	Plug 'lambdatoast/elm.vim', { 'for': 'elm' }
	Plug 'tpope/vim-endwise', { 'for': [ 'ruby', 'bash', 'zsh', 'sh' ]}
	Plug 'kchmck/vim-coffee-script', { 'for': 'coffeescript' }
" }}}

call plug#end()

" Colorscheme and final setup {{{
	" This call must happen after the plug#end() call to ensure
	" that the colorschemes have been loaded
	if filereadable(expand("~/.vimrc_background"))
		let base16colorspace=256
		source ~/.vimrc_background
	else
		let g:onedark_termcolors=16
		let g:onedark_terminal_italics=1
		colorscheme onedark
	endif
	syntax on
	filetype plugin indent on
	" make the highlighting of tabs and other non-text less annoying
	highlight SpecialKey ctermfg=241
	highlight NonText ctermfg=241

	" make comments and HTML attributes italic
	highlight Comment cterm=italic
	highlight htmlArg cterm=italic
	highlight xmlAttrib cterm=italic
	highlight Type cterm=italic
	highlight Normal ctermbg=none

	" hi CursorLine ctermbg=white ctermfg=yellow
" }}}

" Custom Scripts
function! Get_git_root()
	if exists('*fugitive#repo')
	try
		return fugitive#repo().tree()
	catch
	endtry
	endif
	let root = split(system('git rev-parse --show-toplevel'), '\n')[0]
	return v:shell_error ? '' : root
endfunction
function! DiffFile()
	let winheight = winheight(winnr())
	let branchname=b:branchName
	let filename = substitute(getline('.'), '^\w*\s*\(.*\)', '\1', '')
	let gitroot = b:gitroot
	only
	wincmd s
	wincmd k
	execute 'resize '.winheight
	wincmd k
	wincmd J
	wincmd k
	execute 'cd '.gitroot
	execute 'edit '.filename
	execute 'Gdiff '.branchname
endfunction
function! GDiffBranch(branchName)
	let gitroot = Get_git_root()
	let tmpfile = tempname()
	execute 'pedit '.tmpfile
	wincmd P
	let b:branchName=a:branchName
	let b:gitroot = gitroot
	nmap <buffer> q :q!<cr>
	execute 'silent read! git diff --name-status '.a:branchName
	normal! ggdd
	resize 12
	setlocal nomodifiable
	nmap <buffer> gd :call DiffFile()<cr>
endfunction
command! -nargs=1 GDiffBranch call GDiffBranch(<q-args>)

" vim:set foldmethod=marker foldlevel=0
